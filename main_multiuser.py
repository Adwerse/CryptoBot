import asyncio
import requests
import sys
import logging
import json
import websockets
import time
from datetime import datetime
from os import getenv
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

TOKEN = getenv("BOT_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
price_data = {"price": None, "last_update": 0}
bot = None
last_message_update = 0

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_id: {"message_id": int, "active": bool}}
active_users = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
USERS_DATA_FILE = "users_data.json"
RECONNECTION_DELAY = 5
UPDATE_FREQUENCY_LIMIT = 3  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ message_id –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            data_to_save = {
                str(chat_id): {"active": user_data["active"]} 
                for chat_id, user_data in active_users.items() 
                if user_data["active"]
            }
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        logging.info(f"Saved {len(data_to_save)} active users to {USERS_DATA_FILE}")
    except Exception as e:
        logging.error(f"Error saving users data: {e}")

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
            saved_data = json.load(f)
            for chat_id_str, user_data in saved_data.items():
                chat_id = int(chat_id_str)
                active_users[chat_id] = {
                    "message_id": None,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º message_id –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    "active": user_data.get("active", False)
                }
        logging.info(f"Loaded {len(saved_data)} users from {USERS_DATA_FILE}")
    except FileNotFoundError:
        logging.info("No saved users data found. Starting fresh.")
    except Exception as e:
        logging.error(f"Error loading users data: {e}")

dp = Dispatcher()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    text = f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! üëã\n\n"\
           f"ü§ñ <b>Crypto-check Bot</b> - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n\n"\
           f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"\
           f"‚Ä¢ /checkCrypto - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC\n"\
           f"‚Ä¢ /start_updates - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã\n"\
           f"‚Ä¢ /stop_updates - –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"\
           f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n\n"\
           f"üîî <i>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!</i>"
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(Command('checkCrypto'))
async def check_crypto_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã BTC"""
    if price_data["price"] is not None:
        formatted_price = f"{price_data['price']:,.2f}"
        if price_data["last_update"]:
            update_time = datetime.fromtimestamp(price_data["last_update"]).strftime("%H:%M:%S")
            text = f"üí∞ <b>BTC/USDT</b>: ${formatted_price}\nüìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket Binance\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_time}"
        else:
            text = f"üí∞ <b>BTC/USDT</b>: ${formatted_price}\nüìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket Binance"
        await message.answer(text, parse_mode=ParseMode.HTML)
    else:
        await message.answer("‚è≥ –¶–µ–Ω–∞ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")

@dp.message(Command('start_updates'))
async def start_updates_handler(message: Message) -> None:
    """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if chat_id in active_users and active_users[chat_id]["active"]:
        await message.answer("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_updates –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    active_users[chat_id] = {"message_id": None, "active": True}
    save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    await message.answer("üîî <b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n"\
                        "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n"\
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_updates –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.", 
                        parse_mode=ParseMode.HTML)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
    await send_initial_price_message(chat_id)

@dp.message(Command('stop_updates'))
async def stop_updates_handler(message: Message) -> None:
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if chat_id not in active_users or not active_users[chat_id]["active"]:
        await message.answer("‚ùå –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.")
        return
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_users[chat_id]["active"] = False
    save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    await message.answer("üîï <b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>\n"\
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_updates –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.", 
                        parse_mode=ParseMode.HTML)

@dp.message(Command('status'))
async def status_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if chat_id in active_users and active_users[chat_id]["active"]:
        status = "üîî <b>–í–∫–ª—é—á–µ–Ω—ã</b>"
        message_info = f"Message ID: {active_users[chat_id]['message_id']}" if active_users[chat_id]['message_id'] else "–°–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
    else:
        status = "üîï <b>–û—Ç–∫–ª—é—á–µ–Ω—ã</b>"
        message_info = "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã"
    
    total_users = len([u for u in active_users.values() if u["active"]])
    
    text = f"üìä <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n"\
           f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n"\
           f"–î–µ—Ç–∞–ª–∏: {message_info}\n\n"\
           f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"\
           f"üí∞ –¶–µ–Ω–∞ BTC: ${price_data['price']:,.2f}" if price_data['price'] else "üí∞ –¶–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(Command('admin_stats'))
async def admin_stats_handler(message: Message) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"""
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    if message.from_user.id != int(getenv("ADMIN_ID", "0")):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    total_users = len(active_users)
    active_count = len([u for u in active_users.values() if u["active"]])
    inactive_count = total_users - active_count
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebSocket
    connection_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if price_data["price"] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
    last_update = datetime.fromtimestamp(price_data["last_update"]).strftime("%H:%M:%S") if price_data["last_update"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    text = f"üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"\
           f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"\
           f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}\n"\
           f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}\n"\
           f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n\n"\
           f"üì° <b>WebSocket —Å—Ç–∞—Ç—É—Å:</b>\n"\
           f"‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {connection_status}\n"\
           f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}\n"\
           f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price_data['price']:,.2f}" if price_data['price'] else "‚Ä¢ –¶–µ–Ω–∞: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    
    await message.answer(text, parse_mode=ParseMode.HTML)

async def send_initial_price_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if price_data["price"] is None:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—ã
        for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            if price_data["price"] is not None:
                break
            await asyncio.sleep(1)
    
    if price_data["price"] is not None:
        await update_user_message(chat_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            msg = await bot.send_message(
                chat_id=chat_id,
                text="‚è≥ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>\n–¶–µ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode=ParseMode.HTML
            )
            active_users[chat_id]["message_id"] = msg.message_id
        except Exception as e:
            logging.error(f"Error sending initial message to {chat_id}: {e}")

async def update_user_message(chat_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in active_users or not active_users[chat_id]["active"]:
        return
    
    if price_data["price"] is None:
        return
    
    try:
        formatted_price = f"{price_data['price']:,.2f}"
        update_time = datetime.fromtimestamp(price_data["last_update"]).strftime("%H:%M:%S")
        text = f"üí∞ <b>BTC/USDT</b>: ${formatted_price}\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time} (–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)"
        
        if active_users[chat_id]["message_id"] is None:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=ParseMode.HTML
            )
            active_users[chat_id]["message_id"] = msg.message_id
            logging.info(f"Sent initial price message to {chat_id}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=active_users[chat_id]["message_id"],
                text=text,
                parse_mode=ParseMode.HTML
            )
            logging.debug(f"Updated price message for {chat_id}")
            
    except Exception as e:
        logging.error(f"Error updating message for {chat_id}: {e}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID
        if "message to edit not found" in str(e).lower():
            active_users[chat_id]["message_id"] = None

async def update_all_users():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global last_message_update
    
    current_time = time.time()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if current_time - last_message_update < UPDATE_FREQUENCY_LIMIT:
        return
    
    if not bot or price_data["price"] is None:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_count = 0
    for chat_id, user_data in active_users.items():
        if user_data["active"]:
            await update_user_message(chat_id)
            active_count += 1
    
    if active_count > 0:
        logging.debug(f"Updated messages for {active_count} active users")
    
    last_message_update = current_time

async def get_price():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC —á–µ—Ä–µ–∑ WebSocket Binance —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    uri = "wss://stream.binance.com:9443/ws/btcusdt@ticker"
    while True:
        try:
            async with websockets.connect(uri) as websocket:
                logging.info("WebSocket connected to Binance")
                async for message in websocket:
                    data = json.loads(message)
                    new_price = float(data['c'])
                    current_time = time.time()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
                    price_data["price"] = new_price
                    price_data["last_update"] = current_time
                    
                    logging.debug(f"Updated price: {new_price}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    await update_all_users()
                    
        except websockets.exceptions.ConnectionClosed:
            logging.warning(f"WebSocket connection closed. Reconnecting in {RECONNECTION_DELAY} seconds...")
            await asyncio.sleep(RECONNECTION_DELAY)
        except Exception as e:
            logging.error(f"Error in WebSocket connection: {e}")
            await asyncio.sleep(RECONNECTION_DELAY * 2)  # –î–≤–æ–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot
    
    if not TOKEN:
        logging.error("BOT_TOKEN not set in environment variables")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π    
    load_users_data()
    logging.info(f"Loaded {len([u for u in active_users.values() if u['active']])} active users")
        
    bot = Bot(token=TOKEN)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    price_task = asyncio.create_task(get_price())
    
    try:
        logging.info("Starting bot polling...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error in polling: {e}")
    finally:
        logging.info("Shutting down bot...")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        save_users_data()
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        price_task.cancel()
        try:
            await price_task
        except asyncio.CancelledError:
            pass
        await bot.session.close()
        logging.info("Bot shutdown complete")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped by user.")
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)
