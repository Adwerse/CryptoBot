import asyncio
import requests
import sys
import logging
import json
import websockets
import time
from datetime import datetime
from os import getenv
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

TOKEN = getenv("BOT_TOKEN")

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
SUPPORTED_CRYPTOS = {
    "BTC": {"name": "Bitcoin", "symbol": "‚Çø", "pair": "btceur"},
    "ETH": {"name": "Ethereum", "symbol": "Œû", "pair": "etheur"},
    "SOL": {"name": "Solana", "symbol": "‚óé", "pair": "soleur"},
    "XRP": {"name": "XRP", "symbol": "‚úï", "pair": "xrpeur"}
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {"BTC": {"price": float, "last_update": timestamp}, ...}
price_data = {crypto: {"price": None, "last_update": 0} for crypto in SUPPORTED_CRYPTOS}
bot = None
last_message_update = 0

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_id: {"crypto": str, "message_id": int, "active": bool}}
active_users = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
USERS_DATA_FILE = "users_data.json"
RECONNECTION_DELAY = 5
UPDATE_FREQUENCY_LIMIT = 1  # —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ - —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            data_to_save = {}
            for chat_id, user_data in active_users.items():
                data_to_save[str(chat_id)] = {
                    "active": user_data.get("active", False),
                    "crypto": user_data.get("crypto", "BTC")
                }
            
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        
        active_count = len([u for u in active_users.values() if u.get("active", False)])
        logging.info(f"Saved {len(data_to_save)} users ({active_count} active) to {USERS_DATA_FILE}")
    except Exception as e:
        logging.error(f"Error saving users data: {e}")

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
            saved_data = json.load(f)
            for chat_id_str, user_data in saved_data.items():
                chat_id = int(chat_id_str)
                active_users[chat_id] = {
                    "message_id": None,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º message_id –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    "active": user_data.get("active", False),
                    "crypto": user_data.get("crypto", "BTC"),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BTC
                    "last_price": None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
                }
        logging.info(f"Loaded {len(saved_data)} users from {USERS_DATA_FILE}")
    except FileNotFoundError:
        logging.info("No saved users data found. Starting fresh.")  
    except Exception as e:
        logging.error(f"Error loading users data: {e}")

dp = Dispatcher()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    crypto_list = "\n".join([f"‚Ä¢ {code} ({info['name']})" for code, info in SUPPORTED_CRYPTOS.items()])
    text = f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! üëã\n\n"\
           f"ü§ñ <b>Crypto-check Bot</b> - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n\n"\
           f"üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n{crypto_list}\n\n"\
           f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"\
           f"‚Ä¢ /select_crypto - –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"\
           f"‚Ä¢ /checkCrypto - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"\
           f"‚Ä¢ /start_updates - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã\n"\
           f"‚Ä¢ /stop_updates - –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"\
           f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n\n"\
           f"üîî <i>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!</i>"
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(Command('select_crypto'))
async def select_crypto_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    chat_id = message.chat.id
    
    crypto_options = "\n".join([
        f"‚Ä¢ /{code.lower()} - {info['name']} ({info['symbol']})" 
        for code, info in SUPPORTED_CRYPTOS.items()
    ])
    
    current_crypto = active_users.get(chat_id, {}).get("crypto", "BTC")
    current_info = SUPPORTED_CRYPTOS[current_crypto]
    
    text = f"üîç <b>–í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"\
           f"üìä –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: <b>{current_crypto}</b> ({current_info['name']})\n\n"\
           f"üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n{crypto_options}\n\n"\
           f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É</i>"
    
    await message.answer(text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@dp.message(Command('btc'))
async def select_btc_handler(message: Message) -> None:
    await set_user_crypto(message, "BTC")

@dp.message(Command('eth'))
async def select_eth_handler(message: Message) -> None:
    await set_user_crypto(message, "ETH")

@dp.message(Command('sol'))
async def select_sol_handler(message: Message) -> None:
    await set_user_crypto(message, "SOL")

@dp.message(Command('xrp'))
async def select_xrp_handler(message: Message) -> None:
    await set_user_crypto(message, "XRP")

async def set_user_crypto(message: Message, crypto: str) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    crypto_info = SUPPORTED_CRYPTOS[crypto]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in active_users:
        active_users[chat_id] = {
            "message_id": None, 
            "active": False, 
            "crypto": crypto,
            "last_price": None
        }
    else:
        active_users[chat_id]["crypto"] = crypto
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_price –ø—Ä–∏ —Å–º–µ–Ω–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        active_users[chat_id]["last_price"] = None
        active_users[chat_id]["message_id"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º message_id —Ç–æ–∂–µ
    
    save_users_data()
    
    text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ:</b> {crypto} ({crypto_info['name']})\n"\
           f"üîó –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {crypto}/EUR\n\n"\
           f"üí° –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"\
           f"‚Ä¢ /checkCrypto - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã\n"\
           f"‚Ä¢ /start_updates - –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
    
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(Command('checkCrypto'))
async def check_crypto_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    chat_id = message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
    user_crypto = active_users.get(chat_id, {}).get("crypto", "BTC")
    crypto_info = SUPPORTED_CRYPTOS[user_crypto]
    
    if price_data[user_crypto]["price"] is not None:
        formatted_price = f"{price_data[user_crypto]['price']:,.2f}"
        if price_data[user_crypto]["last_update"]:
            update_time = datetime.fromtimestamp(price_data[user_crypto]["last_update"]).strftime("%H:%M:%S")
            text = f"üí∞ <b>{user_crypto}/EUR</b>: ‚Ç¨{formatted_price}\n"\
                   f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket Binance\n"\
                   f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_time}"
        else:
            text = f"üí∞ <b>{user_crypto}/EUR</b>: ‚Ç¨{formatted_price}\n"\
                   f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket Binance"
        await message.answer(text, parse_mode=ParseMode.HTML)
    else:
        await message.answer(f"‚è≥ –¶–µ–Ω–∞ {user_crypto} –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")

@dp.message(Command('start_updates'))
async def start_updates_handler(message: Message) -> None:
    """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if chat_id in active_users and active_users[chat_id]["active"]:
        await message.answer("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_updates –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    if chat_id not in active_users:
        active_users[chat_id] = {
            "message_id": None, 
            "active": True, 
            "crypto": "BTC",
            "last_price": None
        }
    else:
        active_users[chat_id]["active"] = True
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_price –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        active_users[chat_id]["last_price"] = None
        active_users[chat_id]["message_id"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º message_id —Ç–æ–∂–µ
    
    save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    user_crypto = active_users[chat_id]["crypto"]
    crypto_info = SUPPORTED_CRYPTOS[user_crypto]
    
    await message.answer(f"üîî <b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n"\
                        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º: {user_crypto} ({crypto_info['name']})\n"\
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n"\
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_updates –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.", 
                        parse_mode=ParseMode.HTML)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
    await send_initial_price_message(chat_id)

@dp.message(Command('stop_updates'))
async def stop_updates_handler(message: Message) -> None:
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if chat_id not in active_users or not active_users[chat_id]["active"]:
        await message.answer("‚ùå –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.")
        return
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_users[chat_id]["active"] = False
    save_users_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    await message.answer("üîï <b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>\n"\
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_updates –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.", 
                        parse_mode=ParseMode.HTML)

@dp.message(Command('status'))
async def status_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if chat_id in active_users and active_users[chat_id]["active"]:
        status = "üîî <b>–í–∫–ª—é—á–µ–Ω—ã</b>"
        message_info = f"Message ID: {active_users[chat_id]['message_id']}" if active_users[chat_id]['message_id'] else "–°–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        user_crypto = active_users[chat_id].get("crypto", "BTC")
    else:
        status = "üîï <b>–û—Ç–∫–ª—é—á–µ–Ω—ã</b>"
        message_info = "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã"
        user_crypto = active_users.get(chat_id, {}).get("crypto", "BTC")
    
    crypto_info = SUPPORTED_CRYPTOS[user_crypto]
    total_users = len([u for u in active_users.values() if u["active"]])
    
    text = f"üìä <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n"\
           f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n"\
           f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–∞: <b>{user_crypto}</b> ({crypto_info['name']})\n"\
           f"–î–µ—Ç–∞–ª–∏: {message_info}\n\n"\
           f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"\
           f"üí∞ –¶–µ–Ω–∞ {user_crypto}: ‚Ç¨{price_data[user_crypto]['price']:,.2f}" if price_data[user_crypto]['price'] else f"üí∞ –¶–µ–Ω–∞ {user_crypto}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(Command('admin_stats'))
async def admin_stats_handler(message: Message) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)"""
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    if message.from_user.id != int(getenv("ADMIN_ID", "0")):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    total_users = len(active_users)
    active_count = len([u for u in active_users.values() if u["active"]])
    inactive_count = total_users - active_count
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
    crypto_stats = {}
    for user_data in active_users.values():
        if user_data["active"]:
            crypto = user_data.get("crypto", "BTC")
            crypto_stats[crypto] = crypto_stats.get(crypto, 0) + 1
    
    crypto_breakdown = "\n".join([f"‚Ä¢ {crypto}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" for crypto, count in crypto_stats.items()])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebSocket
    all_connected = all(price_data[crypto]["price"] is not None for crypto in SUPPORTED_CRYPTOS)
    connection_status = "üü¢ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã" if all_connected else "üü° –ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"
    
    text = f"üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"\
           f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"\
           f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}\n"\
           f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}\n"\
           f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n\n"\
           f"üìä <b>–ü–æ –∫—Ä–∏–ø—Ç–∞–º:</b>\n{crypto_breakdown or '‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫'}\n\n"\
           f"üì° <b>WebSocket —Å—Ç–∞—Ç—É—Å:</b>\n"\
           f"‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connection_status}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    for crypto, data in price_data.items():
        if data["price"]:
            last_update = datetime.fromtimestamp(data["last_update"]).strftime("%H:%M:%S")
            text += f"‚Ä¢ {crypto}: ‚Ç¨{data['price']:,.2f} ({last_update})\n"
        else:
            text += f"‚Ä¢ {crypto}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n"
    
    await message.answer(text, parse_mode=ParseMode.HTML)

async def send_initial_price_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_crypto = active_users[chat_id].get("crypto", "BTC")
    
    if price_data[user_crypto]["price"] is None:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—ã
        for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            if price_data[user_crypto]["price"] is not None:
                break
            await asyncio.sleep(1)
    
    if price_data[user_crypto]["price"] is not None:
        await update_user_message(chat_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            msg = await bot.send_message(
                chat_id=chat_id,
                text="‚è≥ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>\n–¶–µ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode=ParseMode.HTML
            )
            active_users[chat_id]["message_id"] = msg.message_id
        except Exception as e:
            logging.error(f"Error sending initial message to {chat_id}: {e}")

async def update_user_message(chat_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in active_users or not active_users[chat_id]["active"]:
        return
    
    user_crypto = active_users[chat_id].get("crypto", "BTC")
    
    if price_data[user_crypto]["price"] is None:
        return
    
    try:
        formatted_price = f"{price_data[user_crypto]['price']:,.2f}"
        update_time = datetime.fromtimestamp(price_data[user_crypto]["last_update"]).strftime("%H:%M:%S")
        crypto_info = SUPPORTED_CRYPTOS[user_crypto]
        new_text = f"üí∞ <b>{user_crypto}/EUR</b>: ‚Ç¨{formatted_price}\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time} (–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ (–∞ –Ω–µ –≤—Ä–µ–º—è)
        last_price = active_users[chat_id].get("last_price", None)
        current_price = price_data[user_crypto]["price"]
        
        if active_users[chat_id]["message_id"] is None:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await bot.send_message(
                chat_id=chat_id,
                text=new_text,
                parse_mode=ParseMode.HTML
            )
            active_users[chat_id]["message_id"] = msg.message_id
            active_users[chat_id]["last_price"] = current_price
            logging.info(f"Sent initial price message to {chat_id}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ (–±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.01‚Ç¨)
            if last_price is None or abs(current_price - last_price) >= 0.01:
                try:
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=active_users[chat_id]["message_id"],
                        text=new_text,
                        parse_mode=ParseMode.HTML
                    )
                    active_users[chat_id]["last_price"] = current_price
                    logging.debug(f"Updated price message for {chat_id} (price change: {abs(current_price - (last_price or 0)):.4f}‚Ç¨)")
                except Exception as edit_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if "message to edit not found" in str(edit_error).lower():
                        msg = await bot.send_message(
                            chat_id=chat_id,
                            text=new_text,
                            parse_mode=ParseMode.HTML
                        )
                        active_users[chat_id]["message_id"] = msg.message_id
                        active_users[chat_id]["last_price"] = current_price
                        logging.info(f"Sent new price message to {chat_id} (old message not found)")
                    else:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
                        if "message is not modified" not in str(edit_error).lower():
                            logging.error(f"Error editing message for {chat_id}: {edit_error}")
            
    except Exception as e:
        logging.error(f"Error updating message for {chat_id}: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º message_id
        active_users[chat_id]["message_id"] = None

async def update_all_users():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global last_message_update
    
    current_time = time.time()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if current_time - last_message_update < UPDATE_FREQUENCY_LIMIT:
        return
    
    if not bot:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_count = 0
    for chat_id, user_data in active_users.items():
        if user_data["active"]:
            await update_user_message(chat_id)
            active_count += 1
    
    if active_count > 0:
        logging.debug(f"Updated messages for {active_count} active users")
    
    last_message_update = current_time

async def get_crypto_price(crypto):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ WebSocket Binance"""
    crypto_info = SUPPORTED_CRYPTOS[crypto]
    uri = f"wss://stream.binance.com:9443/ws/{crypto_info['pair']}@ticker"
    
    while True:
        try:
            async with websockets.connect(uri) as websocket:
                logging.info(f"WebSocket connected to Binance ({crypto}/EUR)")
                async for message in websocket:
                    data = json.loads(message)
                    new_price = float(data['c'])
                    current_time = time.time()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                    price_data[crypto]["price"] = new_price
                    price_data[crypto]["last_update"] = current_time
                    
                    logging.debug(f"Updated {crypto}/EUR price: {new_price}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    await update_all_users()
                    
        except websockets.exceptions.ConnectionClosed:
            logging.warning(f"WebSocket connection closed for {crypto}. Reconnecting in {RECONNECTION_DELAY} seconds...")
            await asyncio.sleep(RECONNECTION_DELAY)
        except Exception as e:
            logging.error(f"Error in WebSocket connection for {crypto}: {e}")
            await asyncio.sleep(RECONNECTION_DELAY * 2)  # –î–≤–æ–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def get_price():
    """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    tasks = []
    for crypto in SUPPORTED_CRYPTOS:
        task = asyncio.create_task(get_crypto_price(crypto))
        tasks.append(task)
    
    # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    await asyncio.gather(*tasks)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot
    
    if not TOKEN:
        logging.error("BOT_TOKEN not set in environment variables")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π    
    load_users_data()
    logging.info(f"Loaded {len([u for u in active_users.values() if u['active']])} active users")
        
    bot = Bot(token=TOKEN)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    price_task = asyncio.create_task(get_price())
    
    try:
        logging.info("Starting bot polling...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error in polling: {e}")
    finally:
        logging.info("Shutting down bot...")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        save_users_data()
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        price_task.cancel()
        try:
            await price_task
        except asyncio.CancelledError:
            pass
        await bot.session.close()
        logging.info("Bot shutdown complete")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped by user.")
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)
