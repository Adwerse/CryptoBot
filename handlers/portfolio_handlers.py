# handlers/portfolio_handlers.py
from aiogram import Router, html
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from config import SUPPORTED_CRYPTOS
from services.user_service import active_users, save_users_data, get_user
from services.crypto_service import price_data

router = Router()

@router.message(Command('portfolio_add'))
async def portfolio_add_handler(message: Message) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) != 3:
            raise ValueError
        
        _, crypto, amount_str = args
        amount = float(amount_str)
        crypto = crypto.upper()

        if crypto not in SUPPORTED_CRYPTOS:
            await message.answer(f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {crypto} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        user_data = get_user(chat_id)
        
        if "portfolio" not in user_data:
            user_data["portfolio"] = {}

        user_data["portfolio"][crypto] = user_data["portfolio"].get(crypto, 0) + amount
        save_users_data()
        
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {crypto} –≤ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å.")
        await portfolio_handler(message)

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /portfolio_add [–ö–û–î] [–ö–û–õ-–í–û]\n"
                             "–ü—Ä–∏–º–µ—Ä: /portfolio_add BTC 0.1")

@router.message(Command('portfolio_remove'))
async def portfolio_remove_handler(message: Message) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) != 2:
            raise ValueError

        _, crypto = args
        crypto = crypto.upper()

        user_data = get_user(chat_id)
        if crypto not in user_data.get("portfolio", {}):
            await message.answer(f"‚ùå –ê–∫—Ç–∏–≤ {crypto} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ.")
            return

        del user_data["portfolio"][crypto]
        save_users_data()
        
        await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤ {crypto} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
        await portfolio_handler(message)

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /portfolio_remove [–ö–û–î]\n"
                             "–ü—Ä–∏–º–µ—Ä: /portfolio_remove BTC")

@router.message(Command('portfolio'))
async def portfolio_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    user_data = get_user(chat_id)
    if not user_data.get("portfolio"):
        await message.answer("üì≠ –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.\n\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio_add [–ö–û–î] [–ö–û–õ-–í–û], —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤.")
        return

    portfolio = user_data["portfolio"]
    total_value = 0
    text = "üíº <b>–í–∞—à –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n\n"

    for crypto, amount in portfolio.items():
        current_price = price_data[crypto].get("price")
        if current_price:
            value = amount * current_price
            total_value += value
            text += f"‚Ä¢ <b>{crypto}</b>: {amount} ({SUPPORTED_CRYPTOS[crypto]['symbol']}) - <b>‚Ç¨{value:,.2f}</b>\n"
        else:
            text += f"‚Ä¢ <b>{crypto}</b>: {amount} ({SUPPORTED_CRYPTOS[crypto]['symbol']}) - <i>–¶–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</i>\n"
    
    text += f"\n----------------------------------\n"
    text += f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{total_value:,.2f}</b>"
    
    await message.answer(text, parse_mode=ParseMode.HTML)
