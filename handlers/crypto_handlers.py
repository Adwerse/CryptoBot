# handlers/crypto_handlers.py
from aiogram import Router, html
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from config import SUPPORTED_CRYPTOS
from services.user_service import active_users, save_users_data, get_user
from services.crypto_service import price_data
from datetime import datetime

router = Router()

@router.message(Command('select_crypto'))
async def select_crypto_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    chat_id = message.chat.id
    
    crypto_options = "\n".join([
        f"‚Ä¢ /{code.lower()} - {info['name']} ({info['symbol']})" 
        for code, info in SUPPORTED_CRYPTOS.items()
    ])
    
    user_data = get_user(chat_id)
    current_crypto = user_data.get("crypto", "BTC")
    current_info = SUPPORTED_CRYPTOS[current_crypto]
    
    text = f"üîç <b>–í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"\
           f"üìä –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: <b>{current_crypto}</b> ({current_info['name']})\n\n"\
           f"üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n{crypto_options}\n\n"\
           f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É</i>"
    
    await message.answer(text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@router.message(Command('btc'))
async def select_btc_handler(message: Message) -> None:
    await set_user_crypto(message, "BTC")

@router.message(Command('eth'))
async def select_eth_handler(message: Message) -> None:
    await set_user_crypto(message, "ETH")

@router.message(Command('sol'))
async def select_sol_handler(message: Message) -> None:
    await set_user_crypto(message, "SOL")

@router.message(Command('xrp'))
async def select_xrp_handler(message: Message) -> None:
    await set_user_crypto(message, "XRP")

async def set_user_crypto(message: Message, crypto: str) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    crypto_info = SUPPORTED_CRYPTOS[crypto]
    
    user_data = get_user(chat_id)
    user_data["crypto"] = crypto
    user_data["last_price"] = None
    user_data["message_id"] = None
    
    save_users_data()
    
    text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ:</b> {crypto} ({crypto_info['name']})\n"\
           f"üîó –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {crypto}/EUR\n\n"\
           f"üí° –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"\
           f"‚Ä¢ /checkCrypto - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã\n"\
           f"‚Ä¢ /start_updates - –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
    
    await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(Command('checkCrypto'))
async def check_crypto_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    chat_id = message.chat.id
    
    user_data = get_user(chat_id)
    user_crypto = user_data.get("crypto", "BTC")
    
    if price_data[user_crypto]["price"] is not None:
        formatted_price = f"{price_data[user_crypto]['price']:,.2f}"
        if price_data[user_crypto]["last_update"]:
            update_time = datetime.fromtimestamp(price_data[user_crypto]["last_update"]).strftime("%H:%M:%S")
            text = f"üí∞ <b>{user_crypto}/EUR</b>: ‚Ç¨{formatted_price}\n"\
                   f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket Binance\n"\
                   f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_time}"
        else:
            text = f"üí∞ <b>{user_crypto}/EUR</b>: ‚Ç¨{formatted_price}\n"\
                   f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket Binance"
        await message.answer(text, parse_mode=ParseMode.HTML)
    else:
        await message.answer(f"‚è≥ –¶–µ–Ω–∞ {user_crypto} –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
