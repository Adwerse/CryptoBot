# handlers/admin_handlers.py
from aiogram import Router, html
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from config import SUPPORTED_CRYPTOS, ADMIN_ID
from services.user_service import active_users
from services.crypto_service import price_data
from datetime import datetime

router = Router()

@router.message(Command('admin_stats'))
async def admin_stats_handler(message: Message) -> None:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    total_users = len(active_users)
    active_count = len([u for u in active_users.values() if u["active"]])
    inactive_count = total_users - active_count
    
    crypto_stats = {}
    for user_data in active_users.values():
        if user_data["active"]:
            crypto = user_data.get("crypto", "BTC")
            crypto_stats[crypto] = crypto_stats.get(crypto, 0) + 1
    
    crypto_breakdown = "\n".join([f"‚Ä¢ {crypto}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" for crypto, count in crypto_stats.items()])
    
    all_connected = all(price_data[crypto]["price"] is not None for crypto in SUPPORTED_CRYPTOS)
    connection_status = "üü¢ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã" if all_connected else "üü° –ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"
    
    text = f"üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"\
           f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"\
           f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}\n"\
           f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_count}\n"\
           f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n\n"\
           f"üìä <b>–ü–æ –∫—Ä–∏–ø—Ç–∞–º:</b>\n{crypto_breakdown or '‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫'}\n\n"\
           f"üì° <b>WebSocket —Å—Ç–∞—Ç—É—Å:</b>\n"\
           f"‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {connection_status}\n"
    
    for crypto, data in price_data.items():
        if data["price"]:
            last_update = datetime.fromtimestamp(data["last_update"]).strftime("%H:%M:%S")
            text += f"‚Ä¢ {crypto}: ‚Ç¨{data['price']:,.2f} ({last_update})\n"
        else:
            text += f"‚Ä¢ {crypto}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n"
    
    await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(Command('status'))
async def status_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    user_data = active_users.get(chat_id, {})
    
    if user_data.get("active"):
        status = "üîî <b>–í–∫–ª—é—á–µ–Ω—ã</b>"
        message_info = f"Message ID: {user_data['message_id']}" if user_data.get('message_id') else "–°–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        user_crypto = user_data.get("crypto", "BTC")
    else:
        status = "üîï <b>–û—Ç–∫–ª—é—á–µ–Ω—ã</b>"
        message_info = "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã"
        user_crypto = user_data.get("crypto", "BTC")
    
    crypto_info = SUPPORTED_CRYPTOS[user_crypto]
    total_active_users = len([u for u in active_users.values() if u.get("active")])
    
    price_info = f"üí∞ –¶–µ–Ω–∞ {user_crypto}: ‚Ç¨{price_data[user_crypto]['price']:,.2f}" if price_data[user_crypto].get('price') else f"üí∞ –¶–µ–Ω–∞ {user_crypto}: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    
    text = f"üìä <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n"\
           f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n"\
           f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–∞: <b>{user_crypto}</b> ({crypto_info['name']})\n"\
           f"–î–µ—Ç–∞–ª–∏: {message_info}\n\n"\
           f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_active_users}\n"\
           f"{price_info}"
    
    await message.answer(text, parse_mode=ParseMode.HTML)
